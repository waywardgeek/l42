// These are l42's data structures, based on DataDraw's

module Database db

typedef VoidPtr="NULL"
typedef ComplexFloat="0.0f"
typedef ComplexDouble="0.0"

enum VariableType VAR_
    INT
    UINT
    FLOAT
    DOUBLE
    BIT
    BOOL
    STRING
    ENUM
    POINTER
    SYM
    COMPLEX_FLOAT
    COMPLEX_DOUBLE
    VALUE
    UNBOUND

enum MemoryStyle MEM_
    OBJECT
    VALUE

// This just gives us a way to keep track of top level data structures
class Root create_only

class Modpath

class Module
    sym prefixSym

class Enum

class Entry
    uint32 value

class Class
    MemoryStyle memoryStyle
    uint8 referenceSize
    sym baseClassSym

class Variable
    VariableType type
    bool Array
    Variable firstElementVariable // Used only for arrays
    Variable numElementsVariable // Used only for arrays
    bool hidden // We hide some generated fields from users
    union type
	Enum enumVar: ENUM
	Class classVar: POINTER VALUE
	sym typeSym: SYM // This is only used during parsing, to allow for forward references
	uint8 width: INT UINT
    uint32 line // This is set in parsing so we can report a line number in binding errors
    array char value // Used to keep track of interactive assignments in JSON-like format

class Union
    sym propertySym
    Variable typeVariable
    uint32 line // This is set in parsing so we can report a line number in binding errors
    uint16 number // This is used rather than a name, since unions are not named

class Case
    sym entrySym // Used in binding to an entry

relationship Root Modpath hashed mandatory
relationship Root Module hashed mandatory

relationship Class Variable:freeList child_only
relationship Class:base Class:derived tail_linked mandatory

relationship Enum Entry doubly_linked mandatory

relationship Entry Case tail_linked mandatory

relationship Union Variable tail_linked

relationship Variable Case tail_linked mandatory

schema Function

enum StatementType STATE_
    ASSIGN
    CLASS
    DEF
    DEL
    IF
    IMPORT
    ELIF
    ELSE
    EXPRESSION
    DO
    WHILE
    MODULE
    RETURN
    VARIABLE
    UNION

enum ExpressionType EXPR_
    OR
    AND
    NOT
    LESS_THAN
    GREATER_THAN
    EQUAL
    GREATER_OR_EQUAL
    LESS_OR_EQUAL
    NOT_EQUAL
    BITOR
    BITXOR
    BITAND
    SHIFT_LEFT
    SHIFT_RIGHT
    ADD
    SUBTRACT
    MULTIPLY
    DIVIDE
    MODULUS
    NEGATE
    POWER
    INDEX
    DOT

enum OperatorType OP_
    LEFT_ASSOCIATIVE
    RIGHT_ASSOCIATIVE
    BINARY
    UNARY

class Function

class Block

class Statement
    StatementType type
    union type
        AssignStatement assignStatement cascade: ASSIGN
        ClassStatement classStatement cascade: CLASS
        DefStatement defStatement cascade: DEF
        VariableStatement variableStatement cascade: VARIABLE

class AssignStatement
    ExpressionType type
    Expression leftExpression cascade

class ClassStatement
    sym Name
    sym BaseClassName

class DefStatement
    sym Name

class VariableStatement
    Variable variable

class Expression

class Operator
    OperatorType type
    uint8 priority

relationship Root Operator hashed

relationship Module Block:Top
relationship Module Block doubly_linked mandatory

relationship Block Statement doubly_linked mandatory
relationship Block Function hashed mandatory
relationship Block Class hashed mandatory
relationship Block Variable hashed mandatory
relationship Block Union doubly_linked mandatory
relationship Block Enum hashed mandatory
relationship Block Entry hashed mandatory

relationship Statement Block:Inner cascade
relationship Statement Expression cascade
relationship Statement AssignStatement parent_only
relationship Statement DefStatement parent_only
relationship Statement ClassStatement parent_only
relationship Statement VariableStatement parent_only

relationship Class Block cascade

relationship Function Variable:Return cascade
relationship Function Variable:Param hashed cascade
relationship Function Block cascade

relationship Operator Expresion doubly_linked mandatory

relationship Expression Expression doubly_linked cascade 

schema Parser

enum TokenType TOKEN_
    KEYWORD
    NAME
    EXPRESSION
    COMMA_EXPRESSIONS
    ASSIGN_OPERATOR
    BLOCK

class Rule

class Pattern
    sym moduleSym
    sym functionSym

class Token
    TokenType type
    bool optional
    union type
        sym keywordVal: KEYWORD
        sym nameVal: NAME
        Expression expressionVal: EXPRESSION
        Expression accessExpressionVal: ACCESS_EXPRESSION
        sym assignOperatorVal: ASSIGN_OPERATOR
        Block blockVal: BLOCK

relationship Root Rule hashed
relationship Rule Pattern doubly_linked mandatory
relationship Pattern Token doubly_linked mandatory

schema Compile

relationship Root Rule hashed
relationship Rule Token

// A compiled shared library
class Sharedlib
    
class Func
    VoidPtr funcPtr

relationship Root Sharedlib hashed
relationship Sharedlib Func hashed mandatory
